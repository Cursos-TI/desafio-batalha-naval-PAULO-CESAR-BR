/* 
   Desenvolvido por Paulo Cesar, Aluno Estacio
   Desafio Final: Habilidades Especiais e Áreas de Efeito
*/

#include <stdio.h>
#include <stdlib.h> // necessário para abs()

#define TAMANHO 10   // tamanho do tabuleiro (10x10)
#define NAVIO 3      // tamanho dos navios
#define HABILIDADE 5 // valor usado para marcar área de habilidade

/* --- inicializa tabuleiro com 0 (água) --- */
void inicializarTabuleiro(int tabuleiro[TAMANHO][TAMANHO]) {
    for (int i = 0; i < TAMANHO; i++)
        for (int j = 0; j < TAMANHO; j++)
            tabuleiro[i][j] = 0;
}

/* --- exibe tabuleiro (0=água, 3=navio, 5=habilidade) --- */
void exibirTabuleiro(int tabuleiro[TAMANHO][TAMANHO]) {
    printf("\n--- TABULEIRO BATALHA NAVAL ---\n\n");
    for (int i = 0; i < TAMANHO; i++) {
        for (int j = 0; j < TAMANHO; j++)
            printf("%d ", tabuleiro[i][j]);
        printf("\n");
    }
    printf("\n-------------------------------\n");
}

/* --- posiciona navio horizontal --- */
void posicionarNavioHorizontal(int tabuleiro[TAMANHO][TAMANHO], int linha, int coluna) {
    for (int k = 0; k < NAVIO; k++)
        if (coluna + k < TAMANHO)
            tabuleiro[linha][coluna + k] = 3;
}

/* --- posiciona navio vertical --- */
void posicionarNavioVertical(int tabuleiro[TAMANHO][TAMANHO], int linha, int coluna) {
    for (int k = 0; k < NAVIO; k++)
        if (linha + k < TAMANHO)
            tabuleiro[linha + k][coluna] = 3;
}

/* --- gerar matriz 5x5 do cone (1 = afetado) --- */
void gerarCone(int matriz[5][5]) {
    for (int i = 0; i < 5; i++)
        for (int j = 0; j < 5; j++)
            if (j >= 2 - i && j <= 2 + i) matriz[i][j] = 1; else matriz[i][j] = 0;
}

/* --- gerar matriz 5x5 da cruz --- */
void gerarCruz(int matriz[5][5]) {
    for (int i = 0; i < 5; i++)
        for (int j = 0; j < 5; j++)
            matriz[i][j] = (i == 2 || j == 2) ? 1 : 0;
}

/* --- gerar matriz 5x5 do "octaedro" (losango via distância de Manhattan) --- */
void gerarOctaedro(int matriz[5][5]) {
    for (int i = 0; i < 5; i++)
        for (int j = 0; j < 5; j++)
            matriz[i][j] = (abs(i - 2) + abs(j - 2) <= 2) ? 1 : 0;
}

/* --- sobrepor matriz de habilidade no tabuleiro, centrando na origem --- */
void aplicarHabilidade(int tabuleiro[TAMANHO][TAMANHO], int habilidade[5][5], int origemLinha, int origemColuna) {
    int inicioLinha = origemLinha - 2; // centralizar 5x5
    int inicioColuna = origemColuna - 2;
    for (int i = 0; i < 5; i++) {
        for (int j = 0; j < 5; j++) {
            if (habilidade[i][j] == 1) {
                int tabLinha = inicioLinha + i;
                int tabColuna = inicioColuna + j;
                if (tabLinha >= 0 && tabLinha < TAMANHO && tabColuna >= 0 && tabColuna < TAMANHO) {
                    if (tabuleiro[tabLinha][tabColuna] == 0) // não sobrescrever navio
                        tabuleiro[tabLinha][tabColuna] = HABILIDADE;
                }
            }
        }
    }
}

int main() {
    printf("\nDesenvolvido por Paulo Cesar, Aluno Estacio\n");

    int tabuleiro[TAMANHO][TAMANHO];

    inicializarTabuleiro(tabuleiro);

    // Posiciona dois navios (fixos)
    posicionarNavioHorizontal(tabuleiro, 2, 4);
    posicionarNavioVertical(tabuleiro, 6, 6);

    // Gera matrizes de habilidade
    int cone[5][5], cruz[5][5], octaedro[5][5];
    gerarCone(cone);
    gerarCruz(cruz);
    gerarOctaedro(octaedro);

    // Aplica habilidades (origens fixas)
    aplicarHabilidade(tabuleiro, cone, 1, 1);
    aplicarHabilidade(tabuleiro, cruz, 5, 5);
    aplicarHabilidade(tabuleiro, octaedro, 8, 2);

    // Mostra resultado
    exibirTabuleiro(tabuleiro);

    printf("\nDesenvolvido por Paulo Cesar, Aluno Estacio\n");
    return 0;
}
